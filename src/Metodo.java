
import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author angel
 */
public class Metodo extends javax.swing.JFrame {

    int n_var;
    /*variable que hace referencia al numero de incognitas*/
    DefaultTableModel modelo = new DefaultTableModel();
    /*crear objeto de la clase*/
    Boolean ban = false;

    /*creamos get y set para usarlos en todas las funciones*/
    public int getN() {
        return n_var;
    }

    public void setN(int n) {
        this.n_var = n;
    }

    /**
     * Creates new form Metodo
     */

    public Metodo() {
        initComponents();
        this.setLocationRelativeTo(null);
        /*centrar la ventana*/


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        texto = new javax.swing.JLabel();
        numero_variables = new javax.swing.JTextField();
        jButtonaumentada = new javax.swing.JButton();
        jScrollPane1tabla = new javax.swing.JScrollPane();
        matriz = new javax.swing.JTable();
        jScrollPane2imprimirresultados = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jButtonlimpiar = new javax.swing.JButton();
        jButtondeterminante = new javax.swing.JButton();
        jButtonsistema = new javax.swing.JButton();
        imagen_numeros = new javax.swing.JLabel();
        imagen_calculadora = new javax.swing.JLabel();
        jButtoninversa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255), 2), "Solucion de sistemas por metodo de Gauss-Jordan", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel1.setLayout(null);

        texto.setText("Numero de variables: ");
        jPanel1.add(texto);
        texto.setBounds(40, 60, 130, 30);

        numero_variables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numero_variablesActionPerformed(evt);
            }
        });
        jPanel1.add(numero_variables);
        numero_variables.setBounds(170, 60, 110, 30);

        jButtonaumentada.setText("Ver matriz aumentada");
        jButtonaumentada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonaumentadaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonaumentada);
        jButtonaumentada.setBounds(290, 60, 160, 30);

        matriz.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        matriz.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        matriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "x1"
            }
        ));
        jScrollPane1tabla.setViewportView(matriz);

        jPanel1.add(jScrollPane1tabla);
        jScrollPane1tabla.setBounds(40, 130, 320, 130);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane2imprimirresultados.setViewportView(jTextArea);

        jPanel1.add(jScrollPane2imprimirresultados);
        jScrollPane2imprimirresultados.setBounds(10, 330, 870, 320);

        jButtonlimpiar.setText("Limpiar");
        jButtonlimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonlimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonlimpiar);
        jButtonlimpiar.setBounds(10, 300, 73, 23);

        jButtondeterminante.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtondeterminante.setForeground(new java.awt.Color(51, 51, 255));
        jButtondeterminante.setText("Encontrar determinante");
        jButtondeterminante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtondeterminanteActionPerformed(evt);
            }
        });
        jPanel1.add(jButtondeterminante);
        jButtondeterminante.setBounds(100, 290, 190, 30);

        jButtonsistema.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonsistema.setText("Encontrar las soluciones del sistema");
        jButtonsistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonsistemaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonsistema);
        jButtonsistema.setBounds(300, 290, 270, 30);

        imagen_numeros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.jpg"))); // NOI18N
        jPanel1.add(imagen_numeros);
        imagen_numeros.setBounds(810, 40, 230, 260);

        imagen_calculadora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/calculadora2.jpg"))); // NOI18N
        jPanel1.add(imagen_calculadora);
        imagen_calculadora.setBounds(890, 310, 160, 330);

        jButtoninversa.setText("Encontrar matriz inversa");
        jButtoninversa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoninversaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtoninversa);
        jButtoninversa.setBounds(590, 290, 190, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1055, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonaumentadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonaumentadaActionPerformed
        // TODO add your handling code here:

        try {
            this.setN(Integer.parseInt(numero_variables.getText()));/*convertir el texto a numero entero*/
            n_var = this.getN();
            if (n_var <= 1) {
                throw new Exception("El numero de variables debe ser mayor que 1");
            }
            Object col[] = new Object[n_var + 1]; //el arreglo mostrara las matriz aumentada y la matriz de resultados.

            for (int i = 0; i < n_var + 1; i++) {
                if (i < n_var) {
                    col[i] = "X" + (i + 1); //imprimir matriz de coeficientes
                } else {
                    col[i] = "b"; //matriz de terminos independientes
                }

            }
            modelo = new DefaultTableModel(col, n_var); //se dimensiona la matriz aumentada en la tablita y se hace llamada
            //a la clase con dos parametros.
            matriz.setModel(modelo);  //matriz hace referencia al jtable, se modifica segun las dimensiones del modelo.
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());

        }

    }//GEN-LAST:event_jButtonaumentadaActionPerformed

    private void numero_variablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numero_variablesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numero_variablesActionPerformed

    private void jButtonlimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonlimpiarActionPerformed
        // TODO add your handling code here:
        jTextArea.setText(""); //limpiar 
    }//GEN-LAST:event_jButtonlimpiarActionPerformed

    private void jButtondeterminanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtondeterminanteActionPerformed
        // TODO add your handling code here:

        try {
            int n = this.getN();

            double m[][] = new double[n][n];
            /*declaramos la matriz de coeficientes aumentada*/

            double det;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    m[i][j] = Double.parseDouble(String.valueOf(matriz.getValueAt(i, j))); //convertir a decimal los campos string
                }

            }

            det = this.CalcularDeterminante(m, jTextArea);

            // jTextArea.append("Determinante"+"= "+det+"\n\n");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error");
        }
    }//GEN-LAST:event_jButtondeterminanteActionPerformed

    private void jButtonsistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonsistemaActionPerformed
        // TODO add your handling code here:
        try {
            int n = this.getN();
            /*matriz de coeficientes*/
            double m[][] = new double[n][n];
            /*matriz de terminos independientes*/
            double r[] = new double[n];
            /*declaramos la matriz de coeficientes aumentada*/
            double[][] augmented = new double[n][n + 1];

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    /*convertir a decimal los campos string*/
                    m[i][j] = Double.parseDouble(String.valueOf(matriz.getValueAt(i, j))); //convertir a decimal los campos string
                }
                r[i] = Double.parseDouble(String.valueOf(matriz.getValueAt(i, n)));
            }
            /*En este codigo hacemos las operaciones para tener la matriz aumentada, concatenando 
            m y r*/
            for (int i = 0; i < m.length; i++) {
                for (int j = 0; j < m[0].length; j++) {
                    augmented[i][j] = m[i][j];
                }
                augmented[i][n] = r[i];

            }
            /*Llamada al metodo resolver*/
            this.resolver(augmented, jTextArea);

            // jTextArea.append("Determinante"+"= "+det+"\n\n");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error");
        }
    }//GEN-LAST:event_jButtonsistemaActionPerformed

    private void jButtoninversaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoninversaActionPerformed
        // TODO add your handling code here:
        try {
            int n = this.getN();
            double m[][] = new double[n][n];
            /*declaramos la matriz de coeficientes aumentada*/
            double r[] = new double[n];
            double[][] augmented = new double[n][n + 1];
            double[][] inversa = new double[n][n];

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    m[i][j] = Double.parseDouble(String.valueOf(matriz.getValueAt(i, j))); //convertir a decimal los campos string
                }
                r[i] = Double.parseDouble(String.valueOf(matriz.getValueAt(i, n)));
            }

            for (int i = 0; i < m.length; i++) {
                for (int j = 0; j < m[0].length; j++) {
                    augmented[i][j] = m[i][j];
                }
                augmented[i][n] = r[i];

            }

            inversa = this.inversa(augmented, jTextArea);
            jTextArea.append("La matriz inversa es: \n");
            printMatrix(inversa);
            // jTextArea.append("Determinante"+"= "+det+"\n\n");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error");
        }

    }//GEN-LAST:event_jButtoninversaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Metodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Metodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Metodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Metodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Metodo().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imagen_calculadora;
    private javax.swing.JLabel imagen_numeros;
    private javax.swing.JButton jButtonaumentada;
    private javax.swing.JButton jButtondeterminante;
    private javax.swing.JButton jButtoninversa;
    private javax.swing.JButton jButtonlimpiar;
    private javax.swing.JButton jButtonsistema;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1tabla;
    private javax.swing.JScrollPane jScrollPane2imprimirresultados;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTable matriz;
    private javax.swing.JTextField numero_variables;
    private javax.swing.JLabel texto;
    // End of variables declaration//GEN-END:variables

    private void printMatrix(double[][] matrix) {
        int n = this.getN();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                //System.out.printf("%8.3f", matrix[i][j]);
                //jTextArea.append(Double.toString(matrix[i][j])+"\t\t");
                jTextArea.append(String.format("%.3f", matrix[i][j]) + "\t\t");
            }
            jTextArea.append("\n");
        }
        jTextArea.append("\n");
    }

    private double CalcularDeterminante(double[][] matrix, JTextArea textArea) {
        int n = this.getN();
        double det = 1.0;
        //pivoteo parcial
        for (int i = 0; i < n; i++) {
            int pivotRow = i;
            for (int j = i + 1; j < n; j++) {
                if (Math.abs(matrix[j][i]) > Math.abs(matrix[pivotRow][i])) {
                    pivotRow = j;
                }
            }

            if (i != pivotRow) {
                jTextArea.append("Intercambiando filas...\n");
                double[] temp = matrix[i];
                matrix[i] = matrix[pivotRow];
                matrix[pivotRow] = temp;
                det *= -1; /*si intercambiamos filas afectamos en el signo al determinante*/
                textArea.append(String.format("R%d <-> R%d\n", i + 1, pivotRow + 1));
                printMatrix(matrix);
            }
            
            det *= matrix[i][i];
            //compara si el determinante es muy pequeño o acercandose a cero
            if (Math.abs(det) < 1e-10) {
                JOptionPane.showMessageDialog(null, "El determinante es 0.");
                return 0.0; // determinant is zero
            }

            jTextArea.append("Pivoteando.....\n");
            double pivot = matrix[i][i];

            for (int j = i; j < n; j++) {
                matrix[i][j] /= pivot;

            }
            textArea.append(String.format("R%d / %f -> R%d\n", i + 1, pivot, i + 1));
            printMatrix(matrix);

            for (int j = 0; j < n; j++) {
                if (j == i) {
                    continue;
                }
                double factor = matrix[j][i];
                jTextArea.append("Eliminando....\n");
                for (int k = i; k < n; k++) {
                    matrix[j][k] -= factor * matrix[i][k];
                }
                textArea.append(String.format("R%d - (%f * R%d) -> R%d\n", j + 1, factor, i + 1, j + 1));
                printMatrix(matrix);
            }
        }

        jTextArea.append("Determinante= " + det);
        JOptionPane.showMessageDialog(null, "Determinante= " + det);
        return det;
    }

    private void swapRows(double[][] matrix, int i, int j) {
        double[] temp = matrix[i];
        matrix[i] = matrix[j];
        matrix[j] = temp;
    }

    private void resolver(double[][] matrix, JTextArea textArea) {
        /*nos traemos el valor de n */
        int n = this.getN();

        // Pivoteo parcial
        for (int i = 0; i < n; i++) {
            int max = i; //i empieza con i=0
            for (int j = i + 1; j < n; j++) {
                //compara m(1)(0) con m[0][0] en la primera iteracion 
                if (Math.abs(matrix[j][i]) > Math.abs(matrix[max][i])) { //Math.abs devuelve el valor absoluto de un numero
                    max = j;
                }
            }
            //verifica si el valor absoluto de la entrada actual es mayor que el valor absoluto 
            //de la entrada máxima encontrada hasta ese momento en la misma columna
            //si cambio max, entonces significa que la condicion se cumplio y hay que intercambiar
            if (max != i) {
                double[] temp = matrix[i]; //se declara temporal
                matrix[i] = matrix[max]; //ahora el pivote cambia por el renglon donde se encontro el maximo
                matrix[max] = temp; //lo almacenamos en una variable
                textArea.append(String.format("R%d <-> R%d\n", i + 1, max + 1));
                printMatrix(matrix);
            }
        }

        // Perform Gauss-Jordan elimination
        for (int i = 0; i < n; i++) {
            double pivot = matrix[i][i]; //el pivote esta en la posicion m[0][0] al principio
            for (int j = 0; j < n + 1; j++) {
                matrix[i][j] /= pivot; //dividimos entre el pivote
            }
            textArea.append(String.format("R%d / %f -> R%d\n", i + 1, pivot, i + 1));
            printMatrix(matrix);
            for (int j = 0; j < n; j++) {
                //elimina los coeficientes por encima y por debajo del pivote
                if (i != j) {
                    double factor = matrix[j][i]; //m[1][0]
                    for (int k = 0; k < n + 1; k++) { //para cada columna k en la fila j
                        matrix[j][k] -= factor * matrix[i][k]; //m[1][0]=m[1][0]-1*m[1][0]
                    }
                    textArea.append(String.format("R%d - %f * R%d -> R%d\n", j + 1, factor, i + 1, j + 1));
                    printMatrix(matrix);
                }
            }
        }

        // Print solution
        for (int i = 0; i < n; i++) {
            textArea.append(String.format("x[%d] = %f\n", i + 1, matrix[i][n]));
            JOptionPane.showMessageDialog(null, "x" + (i + 1) + "= " + (matrix[i][n]));
        }
    }

    private double[][] inversa(double[][] matrix, JTextArea jtextArea) {
        int n = this.getN();
        double[][] identity = new double[n][n];
        double det = 1.0;

        for (int i = 0; i < n; i++) {
            int pivotRow = i;
            for (int j = i + 1; j < n; j++) {
                if (Math.abs(matrix[j][i]) > Math.abs(matrix[pivotRow][i])) {
                    pivotRow = j;
                }
            }

            if (i != pivotRow) {
                jTextArea.append("Intercambiando filas...\n");
                double[] temp = matrix[i];
                matrix[i] = matrix[pivotRow];
                matrix[pivotRow] = temp;
                det *= -1;
                jtextArea.append(String.format("R%d <-> R%d\n", i + 1, pivotRow + 1));
                printMatrix(matrix);
            }

            det *= matrix[i][i];
            if (Math.abs(det) < 1e-10) {
                JOptionPane.showMessageDialog(null, "El determinante es 0,por tanto no tiene inversa");

            }
        }
        // Inicializamos la matriz identidad
        for (int i = 0; i < n; i++) {
            identity[i][i] = 1;
        }

        // Aplicamos Gauss-Jordan para obtener la matriz inversa
        for (int i = 0; i < n; i++) {
            double pivot = matrix[i][i];
            jTextArea.append("Pivoteando.....\n");
            for (int j = i; j < n; j++) {
                matrix[i][j] /= pivot;
            }
            jtextArea.append(String.format("R%d / %f -> R%d\n", i + 1, pivot, i + 1));
            jtextArea.append("Matriz: \n");
            printMatrix(matrix);
            jtextArea.append("Matriz identidad: \n");
            printMatrix(identity);

            for (int j = 0; j < n; j++) {
                identity[i][j] /= pivot;
            }
            for (int j = 0; j < n; j++) {
                if (j != i) {
                    double factor = matrix[j][i];
                    jTextArea.append("Eliminando....\n");
                    for (int k = 0; k < n; k++) {
                        matrix[j][k] -= factor * matrix[i][k];
                        identity[j][k] -= factor * identity[i][k];
                    }
                    jtextArea.append(String.format("R%d - (%f * R%d )-> R%d\n", j + 1, factor, i + 1, j + 1));
                    jtextArea.append("Matriz: \n");
                    printMatrix(matrix);
                    jtextArea.append("Matriz identidad: \n");
                    printMatrix(identity);

                }
            }
        }

        return identity;
    }

}
